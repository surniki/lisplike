
* Lisplike: A Toy Interpreter

Lisplike is an interpreter based on the interpreter based on Chapter 2
of ``Lisp in Small Pieces'' by Queinnec. It nicely demonstrates some
of the essentials of programming language interpreters while remaining
a small program. It supports the ~quote~, ~if~, ~define~, ~set!~,
~do~, and ~lambda~ special forms (where ~do~ is similar to ~progn~ in
Common Lisp or ~begin~ in Scheme), as well as variable lookup and
function application. It is a Lisp-1, which means that functions and
variables share the same namespace. Therefore, we can have a repl
session like the following:

#+begin_example
lisplike> (define id (lambda (x) x))
ID

lisplike> id
<<lisplike function #1>>

lisplike> (id id)
<<lisplike function #1>>

lisplike> 
#+end_example

Closures are implemented such that the name of
the function being defined is not present in the encapsulated
environment that is saved within the closure. Therefore, named
recursion is not supported, and the following definition does not 
execute as expected because of the use of ~fact~ inside of the
~lambda~ expression that is evaluated before the global definition is
created.

#+begin_src example
lisplike> (define fact (lambda (n) (if (= n 0) 1 (* n (fact (- n 1))))))
FACT

lisplike> fact
<<lisplike function #2>>

lisplike> (fact 0)
1

lisplike> (fact 10)

From the debugger: "Attempted to use [FACT] as a function."
#+end_src

Without named recursion or ~let~, how can implement the very useful
factorial program? Thankfully, both of these constructs can be implemented
using lambda expressions, so we can proceed without too much hassle by
using the Y combinator and the local variable bindings created by ~lambda~.
First, we can implement the Y combinator.

#+begin_example
lisplike> (define fix ((lambda (d) (d d)) (lambda (w)
                                  (lambda (f)
                                    (f (lambda (x) (((w w) f) x)))))))
FIX
#+end_example

Then, we must define factorial in a slightly different form.

#+begin_example
lisplike> (define fact ((lambda (f) (lambda (n) ((fix f) n))) (lambda (f)
                                                                (lambda (n)
                                                                  (if (= n 0)
                                                                    1
                                                                    (* n (f (- n 1))))))))
FACT
#+end_example

Finally, we can test this ~fact~ out on a few values to see it work!
#+begin_example
lisplike> (do
            (display (fact 0))
            (display (fact 1))
            (display (fact 2))
            (display (fact 3))
            (display (fact 4)))
1
1
2
6
24
DONE
#+end_example

To enter into the repl of this toy interpreter, execute the following
at the Common Lisp repl once the system has been loaded.

#+begin_src lisp
(in-package #:lisplike)
(repl)
#+end_src
